// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/cart.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	// create Cart endpoint
	CartCreate(ctx context.Context, in *CartCreateRequest, opts ...grpc.CallOption) (*CartCreateResponse, error)
	// get Cart products endpoint
	CartGetProducts(ctx context.Context, in *CartGetProductsRequest, opts ...grpc.CallOption) (*CartGetProductsResponse, error)
	// add product to endpoint
	CartAddProduct(ctx context.Context, in *CartAddProductRequest, opts ...grpc.CallOption) (*CartAddProductResponse, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) CartCreate(ctx context.Context, in *CartCreateRequest, opts ...grpc.CallOption) (*CartCreateResponse, error) {
	out := new(CartCreateResponse)
	err := c.cc.Invoke(ctx, "/homework.api.Cart/CartCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) CartGetProducts(ctx context.Context, in *CartGetProductsRequest, opts ...grpc.CallOption) (*CartGetProductsResponse, error) {
	out := new(CartGetProductsResponse)
	err := c.cc.Invoke(ctx, "/homework.api.Cart/CartGetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) CartAddProduct(ctx context.Context, in *CartAddProductRequest, opts ...grpc.CallOption) (*CartAddProductResponse, error) {
	out := new(CartAddProductResponse)
	err := c.cc.Invoke(ctx, "/homework.api.Cart/CartAddProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	// create Cart endpoint
	CartCreate(context.Context, *CartCreateRequest) (*CartCreateResponse, error)
	// get Cart products endpoint
	CartGetProducts(context.Context, *CartGetProductsRequest) (*CartGetProductsResponse, error)
	// add product to endpoint
	CartAddProduct(context.Context, *CartAddProductRequest) (*CartAddProductResponse, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) CartCreate(context.Context, *CartCreateRequest) (*CartCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartCreate not implemented")
}
func (UnimplementedCartServer) CartGetProducts(context.Context, *CartGetProductsRequest) (*CartGetProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartGetProducts not implemented")
}
func (UnimplementedCartServer) CartAddProduct(context.Context, *CartAddProductRequest) (*CartAddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartAddProduct not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_CartCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).CartCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homework.api.Cart/CartCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).CartCreate(ctx, req.(*CartCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_CartGetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartGetProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).CartGetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homework.api.Cart/CartGetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).CartGetProducts(ctx, req.(*CartGetProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_CartAddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartAddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).CartAddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/homework.api.Cart/CartAddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).CartAddProduct(ctx, req.(*CartAddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homework.api.Cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CartCreate",
			Handler:    _Cart_CartCreate_Handler,
		},
		{
			MethodName: "CartGetProducts",
			Handler:    _Cart_CartGetProducts_Handler,
		},
		{
			MethodName: "CartAddProduct",
			Handler:    _Cart_CartAddProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cart.proto",
}
